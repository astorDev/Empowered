<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Empowered.ApplicationConfiguration.Ninjecting</name>
    </assembly>
    <members>
        <member name="T:Empowered.ApplicationConfiguration.Ninjecting.KernelServiceProviderWrapper">
            <summary>
            Wrapper over <see cref="T:Ninject.IKernel"/>
            eliminating resolvment exception
            </summary>
        </member>
        <member name="F:Empowered.ApplicationConfiguration.Ninjecting.KernelServiceProviderWrapper.Kernel">
            <summary>
            Underlying <see cref="T:Ninject.IKernel"/>
            </summary>
        </member>
        <member name="M:Empowered.ApplicationConfiguration.Ninjecting.KernelServiceProviderWrapper.#ctor(Ninject.IKernel)">
            <summary>
            Wraps kernel for safe <see cref="M:Empowered.ApplicationConfiguration.Ninjecting.KernelServiceProviderWrapper.GetService(System.Type)"/>
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:Empowered.ApplicationConfiguration.Ninjecting.KernelServiceProviderWrapper.GetService(System.Type)">
            <summary>
            Tries <see cref="M:System.IServiceProvider.GetService(System.Type)"/> from kernel.
            Returns null if cannot.
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:Empowered.ApplicationConfiguration.Ninjecting.NinjectApplicationBuilderExtensions">
            <summary>
            Extensions for fluent ninject interaction
            </summary>
        </member>
        <member name="M:Empowered.ApplicationConfiguration.Ninjecting.NinjectApplicationBuilderExtensions.StartNinjecting(Empowered.ApplicationConfiguration.ApplicationBuilder)">
            <summary>
            Passed application building to <see cref="T:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder"/> 
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder">
            <summary>
            Base implementation of <see cref="T:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder`1"/>
            that should be used for ninject-based dependency injection
            </summary>
        </member>
        <member name="P:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder.Self">
            <summary>
            Returns this
            </summary>
        </member>
        <member name="T:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder`1">
            <summary>
            <see cref="T:Empowered.ApplicationConfiguration.InitializedApplicationBuilder`1"/> supporting ninject.
            </summary>
        </member>
        <member name="P:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder`1.Kernel">
            <summary>
            <see cref="T:Ninject.IKernel"/> being configured
            </summary>
        </member>
        <member name="P:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder`1.Self">
            <summary>
            Should be overriden to return this
            </summary>
        </member>
        <member name="M:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder`1.#ctor(Empowered.ApplicationConfiguration.ApplicationBuildingTurn{Empowered.ApplicationConfiguration.Ninjecting.KernelServiceProviderWrapper})">
            <summary>
            Creates new <see cref="T:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder`1"/>
            </summary>
            <param name="turn"></param>
        </member>
        <member name="M:Empowered.ApplicationConfiguration.Ninjecting.NinjectedApplicationBuilder`1.Add(Ninject.Modules.INinjectModule)">
            <summary>
            Loads specified module to manipulated <see cref="T:Ninject.IKernel"/>
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
    </members>
</doc>
